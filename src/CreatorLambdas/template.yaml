AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >-
  A simple backend (read/write to DynamoDB) with a RESTful API endpoint using
  Amazon API Gateway.

# Settings
Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
      AllowOrigin: "'*'"
      Credentials: true


  Function:
    Timeout: 10
    Runtime: nodejs14.x
    Environment:
      Variables:
        ENV: !Ref ENV


# Variable declaration
Parameters:
  ENV:
    Type: String
    Default: "Prod"
  BucketName:
    Type: String
    Default: "mrjohnny-upload-contents"
  S3BucketPolicy:
    Type: String
    Default: "arn:aws:s3:::mrjohnny-upload-contents"


Resources:



  # Explicit API resource needed to configure an authorizer
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: "arn:aws:cognito-idp:us-east-1:411460918332:userpool/us-east-1_CKZq8GaRm"
        AddDefaultAuthorizerToCorsPreflight: False
      EndpointConfiguration:
        Type: REGIONAL
        PayloadFormatVersion: "2.0"
      GatewayResponses:
        # API-Gateway responses are missing CORS headers
        # They need to be defined in Lambda functions or here
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              WWW-Authenticate: >-
                'Bearer realm="admin"'




  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "mrjohnny-creator-cloudformation-lambda-role"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: MrJohnnyCreatorS3ByRegion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - "arn:aws:s3:::mrjohnny-upload-contents"
                  - "arn:aws:s3:::mrjohnny-upload-contents/*"
                  - "arn:aws:s3:::mrjohnny-logging-for-upload-contents"
                  - "arn:aws:s3:::mrjohnny-logging-for-upload-contents/*"
        - PolicyName: MrJohnnyCreatorOpenPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeInstances'
                  - 'ec2:AttachNetworkInterface'
                Resource: "*"
        - PolicyName: MrJohnnyCreatorClosedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                Resource: "arn:aws:dynamodb:us-east-1:411460918332:table/*"



  ## this is all bids by bidder - bidders bids
#  CorsOptionsFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: CorsCatchAll.js
#      Handler: CorsCatchAll.handler
#      FunctionName: CorsCatchAll
#      Description: >-
#        All preflight calls ends here
#      MemorySize: 128
#      Timeout: 10
#      Role: !GetAtt 'LambdaExecRole.Arn'
#      VpcConfig:
#        SecurityGroupIds:
#          - sg-0f666341436597447
#        SubnetIds:
#          - subnet-0f0ed4f2b3e9c1a75
#      Tags:
#        "service": "mrjohny"
#      Environment:
#        Variables:
#          REGION: !Ref AWS::Region
#      Events:
#        OptionApi:
#          Type: Api
#          Properties:
#            RestApiId: !Ref ServerlessApi
#            Path: /{proxy+}
#            Method: OPTION
#            Auth:
#              Authorizer: NONE
#          Cors:
#            AllowMethods: "'DELETE,GET,POST,PUT,HEAD,OPTIONS'"
#            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
#            AllowOrigin: "'*'"
#          Credentials: true


  ## this is all bids by bidder - bidders bids
  ListBrandBidsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListBids.js
      Handler: ListBids.handler
      FunctionName: CreatorListBrandBids
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        ListBids:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listBids/{bidder_email}
            Method: GET
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listBids/{bidder_email}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"



  ## list all of creators videos
  ListAllVideosEnabledForBidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListAllVideosEnabledForBid.js
      Handler: ListAllVideosEnabledForBid.handler
      FunctionName: CreatorListAllVideosEnabledForBid
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        ListAllVideosEnabledForBidApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listVideosEnabled
            Method: GET
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listVideosEnabled
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  ## list all of creators videos - creator_videos table
  ListCreatorVideosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListCreatorVideos.js
      Handler: ListCreatorVideos.handler
      FunctionName: CreatorListCreatorVideos
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        ListCreatorVideo:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listCreatorVideos/{creator_email}
            Method: GET
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listCreatorVideos/{creator_email}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
#              ApiKeyRequired: false
          Cors:
            AllowMethods: "'GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  ## list all of creators videos - bids table
  ListAllBidsFilterByCreatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListAllBidsFilterByCreator.js
      Handler: ListAllBidsFilterByCreator.handler
      FunctionName: CreatorListAllBidsFilterByCreator
      Description: >-
        List all bids for creators videos
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        ListAllBidsFilterByCreatorApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listBidsByVideos/{creator_email}
            Method: GET
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /listBidsByVideos/{creator_email}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  PostBrandBidsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PostBid.js
      Handler: PostBid.handler
      FunctionName: CreatorPostBrandBids
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        PostBids:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids
            Method: POST
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'POST,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  GetBrandBidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetBid.js
      Handler: GetBid.handler
      FunctionName: CreatorGetBrandBid
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        GetBid:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids/{id}
            Method: GET
        GETOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids/{id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'DELETE,PUT,GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  GetVideoBidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetVideoBidder.js
      Handler: GetVideoBidder.handler
      FunctionName: CreatorGetVideoBidder
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        GetVideoBid:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids-query/{bidder}/{creator}/{filename}
            Method: GET
        GetVideoBidOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids-query/{bidder}/{creator}/{filename}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'DELETE,PUT,GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"



  DeleteBrandBidsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DeleteBid.js
      Handler: DeleteBid.handler
      FunctionName: CreatorDeleteBrandBids
      Description: >-
        A simple backend (read/write to DynamoDB) with a RESTful API endpoint
        using Amazon API Gateway.
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        DeleteBids:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids/{id}
            Method: DELETE





  GetCreatorVideosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetCreatorVideo.js
      Handler: GetCreatorVideo.handler
      FunctionName: CreatorGetCreatorVideos
      Description: >-
        A simple backend (read/write to DynamoDB) with a RESTful API endpoint
        using Amazon API Gateway.
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        GetCreatorVideo:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator_video/{id}
            Method: GET




  DeleteCreatorVideosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DeleteCreatorVideo.js
      Handler: DeleteCreatorVideo.handler
      FunctionName: CreatorDeleteCreatorVideo
      Description: >-
        A simple backend (read/write to DynamoDB) with a RESTful API endpoint
        using Amazon API Gateway.
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        DeleteVideo:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator_video/{id}
            Method: DELETE
        DELETEOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator_video/{id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'GET,DELETE,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"



  CreatorContentSchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ContentScheduler.js
      Handler: ContentScheduler.handler
      FunctionName: CreatorCreatorContentScheduler
      Description: >-
        A simple backend (read/write to DynamoDB) with a RESTful API endpoint
        using Amazon API Gateway.
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        CreatorScheduler:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator_scheduler
            Method: POST
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator_scheduler
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'POST,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  PutBrandBidsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PutBid.js
      Handler: PutBid.handler
      FunctionName: CreatorPutBid
      Description: >-
        A simple backend (read/write to DynamoDB) with a RESTful API endpoint
        using Amazon API Gateway.
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        PutBid:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /bids/{id}
            Method: PUT





  SignUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SignUrl.js
      Handler: SignUrl.handler
      FunctionName: CreatorSignUrl
      Description: >-
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          UploadBucket: !Ref BucketName
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3BucketPolicy
      Events:
        GetSignUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /sign-url/{username}/{filename}
            Method: GET
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /sign-url/{username}/{filename}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"



  BrandSignUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BrandSignUrl.js
      Handler: BrandSignUrl.handler
      FunctionName: CreatorBrandSignUrl
      Description: >-
        Create brand image upload record in dynamodb and return a sign URL for upload /
        Idempotent - allows for re-submit of image if image fail upload
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          UploadBucket: !Ref BucketName
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3BucketPolicy
      Events:
        BrandPutSignUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /brand-sign-url/{username}/{filename}
            Method: PUT
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /brand-sign-url/{username}/{filename}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'PUT,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"


  ContentCreatorSignUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ContentCreatorSignUrl.js
      Handler: ContentCreatorSignUrl.handler
      FunctionName: CreatorContentCreatorSignUrl
      Description: >-
        Create creator-content upload record in dynamodb and return a sign URL for upload /
        Idempotent - allows for re-submit of image if image fail upload
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          UploadBucket: !Ref BucketName
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3BucketPolicy
      Events:
        CreatorContentSignUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator-sign-url/{username}/{filename}
            Method: PUT
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /creator-sign-url/{username}/{filename}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'PUT,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"



  FetchFileFromS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: FetchFileFromS3.js
      Handler: FetchFileFromS3.handler
      FunctionName: CreatorFetchFileFromS3
      Description: >-
        Retrieve content from S3 and stream
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt 'LambdaExecRole.Arn'
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "service": "mrjohny"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          UploadBucket: !Ref BucketName
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3BucketPolicy
      Events:
        S3Content:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /content/{username}/{filename}
            Method: GET
        OptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /content/{username}/{filename}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
          Cors:
            AllowMethods: "'GET,HEAD,OPTIONS'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"



Outputs:

  # When the package.json scripts are used, this output will be stored
  # inside a api-url file
  CreatorApiUrl:
    Description: The target URL of the created API
    Value: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: CreatorApiUrl
