AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >-
  A simple backend (read/write to DynamoDB) with a RESTful API endpoint using
  Amazon API Gateway.

# Settings
Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
  Function:
    Timeout: 10
    Runtime: nodejs14.x
    #    apiGateway: # Optional API Gateway global config
    #      restApiId: 9n8r136kre # REST API resource ID. Default is generated by the framework
    #      restApiRootResourceId: zbjfz6bszh # Root resource ID, represent as / path
    Environment:
      Variables:
        ENV: !Ref ENV
        ## this means make this parameter available globally to all configuration in this cloud formation
        #HttpApi: !Ref HttpApi
#        UserPoolId: !Ref UserPoolId
#        UserPoolClientId: !Ref UserPoolClientId

# Plugins: serverless-import-apigateway

# Variable declaration
Parameters:
  ENV:
    Type: String
    Default: "prod"
  HttpApi:
    Type: String
    Default: "SignupFlow"

## do not configure below as they appear in the lambda function environment variables
#  UserPoolId:
#    Type: String
#    Default: "us-east-1_eqsRxbA3C"
#  UserPoolClientId:
#    Type: String
#    Default: "69qme3q9ogoainiii5tg3eg998"

Resources:
#  TestAuthorizer:
#    Type: AWS::ApiGateway::Authorizer
#    Properties:
#      IdentitySource: method.request.header.authorization
#      Name: CognitoAuthorizer
#      ProviderARNs: "arn:aws:cognito-idp:us-east-1:411460918332:userpool/us-east-1_eqsRxbA3C"
#      RestApiId: 9n8r136kre
#      Type: COGNITO_USER_POOLS
#
#  CORSOptionsMethod: # Adds cors
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ResourceId: zbjfz6bszh
#      RestApiId: 9n8r136kre
#      HttpMethod: OPTIONS
#      ApiKeyRequired: false
#      AuthorizationType: COGNITO_USER_POOLS
#      AuthorizerId: !Ref TestAuthorizer
#      Integration:
#        Type: MOCK
#        Uri: !Sub "arn:aws:lambda:us-east-1:411460918332:function:ListBids"
#        IntegrationResponses:
#          - ResponseParameters:
#              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Cache-Control'"
#              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
#              method.response.header.Access-Control-Allow-Origin: !Sub
#                - "'${CORSOrigin}'"
#                - {
#                  "CORSOrigin":
#                    !FindInMap [Environment, !Ref Environment, CORSOrigin],
#                }
#            ResponseTemplates:
#              application/json: ""
#            StatusCode: "200"
#        PassthroughBehavior: NEVER
#        RequestTemplates:
#          application/json: '{"statusCode": 200}'
#      MethodResponses:
#        - ResponseModels:
#            application/json: Empty
#          ResponseParameters:
#            method.response.header.Access-Control-Allow-Headers: true
#            method.response.header.Access-Control-Allow-Methods: true
#            method.response.header.Access-Control-Allow-Origin: true
#          StatusCode: "200"
#
#
#  ApiGatewayMethod:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ResourceId: zbjfz6bszh
#      RestApiId: 9n8r136kre
#      AuthorizationType: COGNITO_USER_POOLS
#      AuthorizerId: !Ref TestAuthorizer
#      HttpMethod: GET
#      Integration:
#        Type: AWS_PROXY
#        Uri: !Sub "arn:aws:lambda:us-east-1:411460918332:function:ListBids"
#      OperationName: "ListBids"


  # Explicit API resource needed to configure an authorizer
  ServerlessApi:
    Type: AWS::Serverless::Api
#    ResourceId: zbjfz6bszh
#    RestApiId: 9n8r136kre
#    EndpointConfiguration:
#      Type: REGIONAL
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: "arn:aws:cognito-idp:us-east-1:411460918332:userpool/us-east-1_eqsRxbA3C"
      GatewayResponses:
        # API-Gateway responses are missing CORS headers
        # They need to be defined in Lambda functions or here
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              WWW-Authenticate: >-
                'Bearer realm="admin"'




  ListBidsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListBids.js
      Handler: ListBids.handler
      FunctionName: ListBrandBids
      Description: >-
        A simple backend (read/write to DynamoDB) with a RESTful API endpoint
        using Amazon API Gateway.
      MemorySize: 512
      Timeout: 10
      Role: "arn:aws:iam::411460918332:role/service-role/mrjohnny-dynamo-lambda-role"
      VpcConfig:
        SecurityGroupIds:
          - sg-0f666341436597447
        SubnetIds:
          - subnet-0f0ed4f2b3e9c1a75
      Tags:
        "lambda-console:blueprint": microservice-http-endpoint
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        Bids:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /list-bids
            Method: GET
#              PayloadFormatVersion: "2.0"
#              RouteSettings:
#                ThrottlingBurstLimit: 600


  #ApiGatewayResource:
  #  Type: AWS::ApiGateway::Resource
  #  Properties:
  #    ParentId: zbjfz6bszh
  #    PathPart: 'lambda'
  #    RestApiId: 9n8r136kre

  #      restApiId: 9n8r136kre # REST API resource ID. Default is generated by the framework
  #      restApiRootResourceId: zbjfz6bszh # Root resource ID, represent as / path

  # Need a way to force this to update, still looking for something easy
  #    TestDeploy:
  #      Type: AWS::ApiGateway::Deployment
  #      Properties:
  #        RestApiId: !Ref TestApi
  #        StageName: test

  #  ApiGatewayResource:
  #    Type: AWS::ApiGateway::Resource
  #    Properties:
  #      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
  #      PathPart: 'lambda'
  #      RestApiId: !Ref ApiGatewayRestApi
  #

  #
  #  ApiGatewayModel:
  #    Type: AWS::ApiGateway::Model
  #    Properties:
  #      ContentType: 'application/json'
  #      RestApiId: !Ref ApiGatewayRestApi
  #      Schema: {}
  #
  #  ApiGatewayStage:
  #    Type: AWS::ApiGateway::Stage
  #    Properties:
  #      DeploymentId: !Ref ApiGatewayDeployment
  #      Description: Lambda API Stage v0
  #      RestApiId: !Ref ApiGatewayRestApi
  #      StageName: 'v0'
  #
  #  ApiGatewayDeployment:
  #    Type: AWS::ApiGateway::Deployment
  #    DependsOn: ApiGatewayMethod
  #    Properties:
  #      Description: Lambda API Deployment
  #      RestApiId: !Ref ApiGatewayRestApi

  #Outputs:
  #  MyFunctionUrlEndpoint:
  #    Description: "My Lambda Function URL Endpoint"
  #    Value:
  #      Fn::GetAtt: ListBids.FunctionUrl
  #Outputs:
  #  apiGatewayInvokeURL:
  #    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/"

  #Outputs:

  # When the package.json scripts are used, this output will be stored
  # inside a api-url file
#  ApiUrl:
#    Description: The target URL of the created API
#    Value: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
#    Export:
#      Name: ApiUrl



Outputs:

  # When the package.json scripts are used, this output will be stored
  # inside a api-url file
  ApiUrl:
    Description: The target URL of the created API
    Value: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: BidsFlow

